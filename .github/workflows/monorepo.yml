name: "All: Build and Package"

on:
  push:
    branches: [ "main", "feature/*" ]

  pull_request:
    branches: [ "main" ]

  workflow_dispatch:


jobs:
  strings:
    runs-on: ubuntu-latest
    outputs:
      build-dir: ${{ steps.strings.outputs.build-dir }}
      build-version: ${{ steps.strings.outputs.build-version }}
      install-dir: ${{ steps.strings.outputs.install-dir }}
    steps:
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "install-dir=${{ github.workspace }}/build/install" >> "$GITHUB_OUTPUT"
          COMMIT_HASH=${{ github.sha }}
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "${{ github.event.repository.default_branch }}" ] && VERSION=latest
          VERSION="$VERSION+sha.${COMMIT_HASH:0:8}"
          echo VERSION=$VERSION
          echo "build-version=${VERSION}" >> "$GITHUB_OUTPUT"

  project-a:
    needs: [ strings ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            project-a:
              - 'project-a/**'

      - uses: lukka/get-cmake@latest
        if: steps.changes.outputs.project-a == 'true'

      - uses: lukka/run-vcpkg@v11.5
        if: steps.changes.outputs.project-a == 'true'

      - name: Configure CMake
        if: steps.changes.outputs.project-a == 'true'
        run: cmake --preset project-a -Dsubprojects:STRING="project-a"

      - name: Build
        if: steps.changes.outputs.project-a == 'true'
        run: cmake --build --preset project-a

      - name: Test
        if: steps.changes.outputs.project-a == 'true'
        run: ctest --preset project-a

      - name: Package
        if: steps.changes.outputs.project-a == 'true'
        run: cpack --preset project-a -R "${{ needs.strings.outputs.build-version }}"

      - uses: actions/upload-artifact@v4
        if: steps.changes.outputs.project-a == 'true'
        with:
          name: project-a-${{ needs.strings.outputs.build-version }}
          path: ${{ needs.strings.outputs.build-dir }}/project-a/project-a-*
          if-no-files-found: error

  project-b:
    needs: [ strings, project-a ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: lukka/get-cmake@latest

      - uses: lukka/run-vcpkg@v11.5

      - uses: dawidd6/action-download-artifact@v6
        id: download-from-branch
        with:
          workflow: monorepo.yml
          workflow_conclusion: success
          branch: "${{ github.ref }}"
          event: push
          name: project-a-*
          name_is_regexp: true
          path: ${{ needs.strings.outputs.build-dir }}
          if_no_artifact_found: ignore

      - uses: dawidd6/action-download-artifact@v6
        if: ${{ steps.download-from-branch.outputs.found_artifact != 'true' }}
        with:
          workflow: monorepo.yml
          workflow_conclusion: success
          branch: "${{ github.event.repository.default_branch }}"
          event: push
          name: project-a-*
          name_is_regexp: true
          path: ${{ needs.strings.outputs.build-dir }}


      - name: Install Dependency
        run: >
          sh ${{ needs.strings.outputs.build-dir }}/project-a-*/project-a-*.sh
          --skip-license
          --include-subdir
          --prefix=${{ needs.strings.outputs.install-dir }}

      - name: Configure CMake
        run: cmake --preset project-b -Dsubprojects:STRING="project-b"

      - name: Build
        run: cmake --build --preset project-b

      - name: Test
        run: ctest --preset project-b

      - name: Package
        run: cpack --preset project-b -R "${{ needs.strings.outputs.build-version }}"

      - uses: actions/upload-artifact@v4
        with:
          name: project-b-${{ needs.strings.outputs.build-version }}
          path: ${{ needs.strings.outputs.build-dir }}/project-b/project-b-*
          if-no-files-found: error

