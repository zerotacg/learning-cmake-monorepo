name: "All: Partly Cached Build and Package"

on:
  push:
    branches: [ "main", "feature/*" ]

  pull_request:
    branches: [ "main" ]

  workflow_dispatch:


jobs:
  strings:
    runs-on: ubuntu-latest
    outputs:
      build-dir: ${{ steps.strings.outputs.build-dir }}
      build-version: ${{ steps.strings.outputs.build-version }}
      install-dir: ${{ steps.strings.outputs.install-dir }}
    steps:
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "install-dir=${{ github.workspace }}/build/install" >> "$GITHUB_OUTPUT"
          COMMIT_HASH=${{ github.sha }}
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "${{ github.event.repository.default_branch }}" ] && VERSION=latest
          VERSION="$VERSION+sha.${COMMIT_HASH:0:8}"
          echo VERSION=$VERSION
          echo "build-version=${VERSION}" >> "$GITHUB_OUTPUT"

  project-a:
    needs: [ strings ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        library: [ static, shared ]
    outputs:
      static-artifact-id: ${{ steps.output.outputs.static-artifact-id }}
      shared-artifact-id: ${{ steps.output.outputs.shared-artifact-id }}
    steps:
      - uses: actions/checkout@v5

      - id: cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-project-a-${{ hashFiles('project-a/**', 'vcpkg*.json') }}
          path: ${{ needs.strings.outputs.build-dir }}

      - uses: ./.github/project-a
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          build-dir: ${{ needs.strings.outputs.build-dir }}
          build-version: ${{ needs.strings.outputs.build-version }}
          library-type: ${{ matrix.library }}

      - uses: actions/upload-artifact@v4
        id: artifact
        with:
          name: project-a-${{ matrix.library }}-${{ needs.strings.outputs.build-version }}
          path: ${{ needs.strings.outputs.build-dir }}/project-a/project-a-*
          if-no-files-found: error

      - id: output
        run: |
          echo "${{ matrix.library }}-artifact-id=${{ steps.artifact.outputs.artifact-id }}" >> $GITHUB_OUTPUT

  project-b:
    needs: [ strings, project-a ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - id: cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-project-b-${{ hashFiles('build/project-a-*.sh', 'project-b/**', 'vcpkg*.json') }}
          path: ${{ needs.strings.outputs.build-dir }}

      - uses: ./.github/project-b
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          build-dir: ${{ needs.strings.outputs.build-dir }}
          build-version: ${{ needs.strings.outputs.build-version }}
          install-dir: ${{ needs.strings.outputs.install-dir }}
          project-a-artifact-id: ${{ needs.project-a.outputs.static-artifact-id }}

      - uses: actions/upload-artifact@v4
        with:
          name: project-b-${{ needs.strings.outputs.build-version }}
          path: ${{ needs.strings.outputs.build-dir }}/project-b/project-b-*
          if-no-files-found: error


  project-c:
    needs: [ strings, project-a ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - id: cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-project-b-${{ hashFiles('build/project-a-*.sh', 'project-c/**', 'vcpkg*.json') }}
          path: ${{ needs.strings.outputs.build-dir }}

      - uses: actions/download-artifact@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          merge-multiple: true
          pattern: project-a-*
          path: ${{ needs.strings.outputs.build-dir }}

      - uses: lukka/get-cmake@latest
        if: steps.cache.outputs.cache-hit != 'true'

      - uses: lukka/run-vcpkg@v11.5
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install Dependency
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          sh ${{ needs.strings.outputs.build-dir }}/project-a-*.sh
          --skip-license
          --include-subdir
          --prefix=${{ needs.strings.outputs.install-dir }}

      - name: Configure CMake
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake --preset project-c

      - name: Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake --build --preset project-c/all

      - name: Test
        if: steps.cache.outputs.cache-hit != 'true'
        run: ctest --preset project-c

      - name: Package
        if: steps.cache.outputs.cache-hit != 'true'
        run: cpack --preset project-c -R "${{ needs.strings.outputs.build-version }}"

      - uses: actions/upload-artifact@v4
        with:
          name: project-c-${{ needs.strings.outputs.build-version }}
          path: ${{ needs.strings.outputs.build-dir }}/project-c/project-c-*
          if-no-files-found: error

